# ワークフローの名前
name: terrafform workflow for gke
#------------------------------------------------------
# ワークフローをトリガーするイベントを定義
#------------------------------------------------------
on:
  # 新しいコードが main ブランチに push された時にトリガー
  push:
    branches:
      - main
    # 変更がトリガーとなるファイル
    paths:
      - '.github/workflows/terrafform-gke-workflow.yml'  
      - 'api/app.py'
      - 'api/Dockerfile'
      - 'terraform/gcp/gke/*.tf'
#      - 'k8s/*.yml'
#      - 'k8s/*.yaml'
  # main ブランチに PR された時にトリガー
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/terrafform-gke-workflow.yml'  
      - 'api/app.py'
      - 'api/Dockerfile'
      - 'terraform/gcp/gke/*.tf'
#      - 'k8s/*.yml'
#      - 'k8s/*.yaml'
#------------------------------------------------------
# GitHub レポジトリへの権限設定
#------------------------------------------------------
permissions:
  contents: "read"
  id-token: "write"
  issues: "write"
  pull-requests: "write"                # Pull Request へのコメントを可能にする
#------------------------------------------------------
# job（ワークフローの中で実行される処理のひとまとまり）を定義
#------------------------------------------------------
jobs:
  terraform-gke-job:                    # job ID
    name: terraform job for gke         # job 名
    runs-on: ubuntu-latest              # ジョブを実行するマシン
    #-----------------------------
    # 環境変数の設定
    #-----------------------------
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     # GitHub レポジトリへのアクセストークンを設定し、GitHub レポジトリへのコメントが可能にする / secrets は、github レポジトリの project の setting > secrets から登録する
      PROJECT_ID: my-project2-303004
      API_IMAGE_NAME: fast-api-image-gke
      CLUSTER_NAME: fast-api-terraform-cluster
      REGION: us-central1
      ZONE: us-central1-b
    #-----------------------------
    # ジョブの中で実行される一連のタスク
    #-----------------------------
    steps:
      #-----------------------------
      # ブランチを切る
      #-----------------------------
      - uses: actions/checkout@v3       # use タグで Actions（一連の定義済み処理）を指定 / actions/checkout@v2 : actions/v2 という GitHub リポジトリにあるアクションの v2 ブランチのコードを使用し、指定したリポジトリからソースコードを git checkout する
      #-----------------------------
      #  diff があるか確認
      #-----------------------------
      - name: Check diff for *.workflow files
        id: diff_workflow
        uses: technote-space/get-diff-action@v4.0.2
        with:
          PATTERNS: |
            '.github/workflows/terrafform-gke-workflow.yml'
      - name: Check diff for api
        id: diff_api
        uses: technote-space/get-diff-action@v4.0.2
        with:
          PATTERNS: |
            app/app.py
            app/Dockerfile
      - name: Check diff for *.tf files
        id: diff_tf
        uses: technote-space/get-diff-action@v4.0.2
        with:
          PATTERNS: |
            terraform/gcp/gke/*.tf
#      - name: Check diff for k8s files
#        id: diff_k8s
#        uses: technote-space/get-diff-action@v4.0.2
#        with:
#          PATTERNS: |
#            k8s/*.yml
#            k8s/*.yaml
      #-----------------------------
      # GCP の認証処理
      #-----------------------------
#      - name: "authenticate to gcp"
#        uses: "google-github-actions/auth@v0.4.0"
#        with:
#          create_credentials_file: "true"
#          activate_credentials_file: "true"
      #-----------------------------
      # gclould のインストール
      #-----------------------------
      - name: "install gcloud"
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: gcloud auth
        run: gcloud auth configure-docker
      - name: gcloud config list
        run: gcloud config list
      #-----------------------------
      # docker image 作成 & GCR に push
      #-----------------------------
      - name: 'docker pull from gcr for api'
        if: steps.diff_api.outputs.diff
        run: "bash -c 'docker pull gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest || exit 0'"
      - name: 'docker build for api'
        if: steps.diff_api.outputs.diff
        run: 'docker build -t gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest --cache-from gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest -f api/Dockerfile .'
      - name: 'docker push to gcr for api'
        if: steps.diff_api.outputs.diff
        run: 'docker push gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest'
      #-----------------------------
      # terraform のインストール
      #-----------------------------
      - name: install terraform
        if: steps.diff_tf.outputs.diff
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.3
      #-----------------------------
      # GKE クラスターとノードプール作成
      #-----------------------------
      # terraform init
      - name: terraform init for gke
        if: steps.diff_tf.outputs.diff
        run: terraform -chdir="terraform/gcp/gke" init
      # terraform plan
      - name: terraform plan for gke
        if: steps.diff_tf.outputs.diff
        id: plan
        run: terraform -chdir="terraform/gcp/gke" plan -out workspace.plan
      # PR に terraform plan の内容を投稿
      - name: post PR terraform plan for gke
        if: always() && steps.diff_tf.outputs.diff && github.event_name == 'pull_request'
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
      # terraform apply
      - name: terraform apply for gke
        if: steps.diff_tf.outputs.diff && github.event_name == 'push'
        run: terraform -chdir="terraform/gcp/gke" apply workspace.plan
      #-----------------------------
      # 各種 k8s リソースを GKE にデプロイ
      #-----------------------------
      # kubectl コマンドのインストール
      - name: install kubectl
        if: steps.diff_tf.outputs.diff
        uses: azure/setup-kubectl@v1
      # 作成したクラスタに切り替える
      - name: get-credentials for gke clusters
        if: steps.diff_tf.outputs.diff
        run: gcloud container clusters get-credentials ${CLUSTER_NAME} --project ${PROJECT_ID} --region ${ZONE}
      # API の k8s リソースのデプロイ
      - name: deploy k8s resources for api
        if: steps.diff_tf.outputs.diff
        run: kubectl apply -f k8s/fast_api.yml
      #-----------------------------
      # ArgoCD
      #-----------------------------
      # ArgoCD のインストール
      - name: install argocd cli
        if: steps.diff_tf.outputs.diff
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      # ArgoCD の k8s リソースのデプロイ
      - name: deploy k8s resources for argocd
        if: steps.diff_tf.outputs.diff
        run: |
          kubectl create namespace argocd || kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          sleep 120
      # ArgoCD API Server にログインする
      - name: login argocd server
        if: steps.diff_tf.outputs.diff
        run: |
          kubectl patch svc argocd-server -n argocd -p "{'spec':{'type':'LoadBalancer'}}"
          sleep 120
          ARGOCD_SERVER_DOMAIN=`kubectl describe service argocd-server --namespace argocd | grep "LoadBalancer Ingress" | awk '{print $3}'`
          ARGOCD_PASSWARD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
          echo "ARGOCD_SERVER_DOMAIN : ${ARGOCD_SERVER_DOMAIN}"
          echo "ARGOCD_PASSWARD : ${ARGOCD_PASSWARD}"
          argocd login ${ARGOCD_SERVER_DOMAIN} --username admin --password ${ARGOCD_PASSWARD} --insecure
      # ArgoCD で管理するクラスターを設定する
      - name: connect gke claster with argocd
        if: steps.diff_tf.outputs.diff
        run: argocd cluster add -y gke_${PROJECT_ID}_${ZONE}_${CLUSTER_NAME}
      # ArgoCD で管理する GitHub の k8s マニフェストファイルのフォルダーを設定
      - name: connect k8s mainifests with argocd
        if: steps.diff_tf.outputs.diff
#        run: kubectl apply -f k8s/argocd-app.yml
        run: kubectl apply -f k8s/argocd-app-private.yml