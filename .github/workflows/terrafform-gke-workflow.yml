# ワークフローの名前
name: terrafform workflow for gke
#------------------------------------------------------
# ワークフローをトリガーするイベントを定義
#------------------------------------------------------
on:
  # 新しいコードが main ブランチに push された時にトリガー
  push:
    branches:
      - main
    # 変更がトリガーとなるファイル
    paths:
      - '.github/workflows/*'  
      - 'api/app.py'
      - 'api/Dockerfile'
#      - 'terraform/gcp/iam/**'
#      - 'terraform/gcp/gcr/*.tf'
      - 'terraform/gcp/gke/*.tf'
  # main ブランチに PR された時にトリガー
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/*'
      - 'api/app.py'
      - 'api/Dockerfile'
#      - 'terraform/gcp/iam/**'      
#      - 'terraform/gcp/gcr/*.tf'
      - 'terraform/gcp/gke/*.tf'
#------------------------------------------------------
# GitHub レポジトリへの権限設定
#------------------------------------------------------
permissions:
  contents: "read"
  id-token: "write"
  issues: "write"
  pull-requests: "write"                # Pull Request へのコメントを可能にする
#------------------------------------------------------
# job（ワークフローの中で実行される処理のひとまとまり）を定義
#------------------------------------------------------
jobs:
  terraform-gke-job:                    # job ID
    name: terraform job for gke         # job 名
    runs-on: ubuntu-latest              # ジョブを実行するマシン
    #-----------------------------
    # GitHub Actions の build matrix 機能を使用して、同一ジョブを複数ディレクトリに対して並列実行
    # これにより、異なる AWS リソース（ec2, iamなど）の tf ファイルに対しての terraform 処理を並列に実行できるようになる
    #-----------------------------    
    strategy:
      matrix:
        dir:
#          - terraform/gcp/iam           # GCP の IAM の tf ファイルを格納
#          - terraform/gcp/gcr           # GCP の GCR の tf ファイルを格納
          - terraform/gcp/gke           # GCP の GKE クラスターの tf ファイルを格納
    #-----------------------------
    # 環境変数の設定
    #-----------------------------
    env:
      PROJECT_ID: my-project2-303004
      SERVICE_ACCOUNT: github_actions_service_account@my-project2-303004.iam.gserviceaccount.com                                                       # GitHub Actions 用のサービスアカウント
      WORKLOAD_IDENTITY_PROVIDER: "projects/85607256401/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider"  # GitHub Actions 用のサービスアカウントと接続する Workload Identity プロバイダーの名前
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     # GitHub レポジトリへのアクセストークンを設定し、GitHub レポジトリへのコメントが可能にする / secrets は、github レポジトリの project の setting > secrets から登録する
      TERRAFORM_DIR: ${{ matrix.dir }}              # tf ファイルの格納ディレクトリ
      API_IMAGE_NAME: fast-api-image-gke:latest
    #-----------------------------
    # ジョブの中で実行される一連のタスク
    #-----------------------------
    steps:
      #-----------------------------
      # ブランチを切る
      #-----------------------------
      - uses: actions/checkout@v3       # use タグで Actions（一連の定義済み処理）を指定 / actions/checkout@v2 : actions/v2 という GitHub リポジトリにあるアクションの v2 ブランチのコードを使用し、指定したリポジトリからソースコードを git checkout する
      #-----------------------------
      #  diff があるか確認
      #-----------------------------
      - name: Check diff for api
        id: diff_api
        uses: technote-space/get-diff-action@v4.0.2
        with:
          PATTERNS: |
            app/app.py
            app/Dockerfile
      - name: Check diff for gke *.tf
        id: diff_tf
        uses: technote-space/get-diff-action@v4.0.2
        with:
          PATTERNS: |
            ${{ env.TERRAFORM_DIR }}/gke/*.tf
      #-----------------------------
      # GCP の認証処理
      #-----------------------------
      # Workload Identity を使用した認証
      - name: "authenticate to gcp"
#        if: steps.diff_tf.outputs.diff == 'true' || steps.diff_api.outputs.diff == 'true'
        uses: "google-github-actions/auth@v0.4.0"
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          create_credentials_file: "true"
          activate_credentials_file: "true"
      #-----------------------------
      # gclould のインストール
      #-----------------------------
#      - name: "install gcloud"
#        if: steps.diff_api.outputs.diff == 'true'
#        uses: google-github-actions/setup-gcloud@v0.2.0
#        with:
#          project_id: ${{ env.PROJECT_ID }}
#          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
#          service_account: ${{ env.SERVICE_ACCOUNT }}
#          create_credentials_file: 'true'
      #-----------------------------
      # docker image 作成 & GCR に push
      #-----------------------------
#      - name: "bulid docker images and push to gcr for api"
#        if: steps.diff_api.outputs.diff == 'true'
#        run: cd api && gcloud builds submit --config cloudbuild.yml --timeout 3600
      - name: 'docker pull from gcr for api'
#        if: steps.diff_api.outputs.diff == 'true'
        run: "bash -c 'docker pull gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest || exit 0'"
      - name: 'docker build for api'
#        if: steps.diff_api.outputs.diff == 'true'
        run: 'docker build -t gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest --cache-from gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest -f api/Dockerfile .'
      - name: 'docker push to gcr for proxy and try-on model'
#        if: steps.diff_api.outputs.diff == 'true'
        run: 'docker push gcr.io/${PROJECT_ID}/${API_IMAGE_NAME}:latest'
      #-----------------------------
      # GKE クラスターとノードプール作成
      #-----------------------------
      # terraform のインストール
      - name: install terraform
#        if: steps.diff_tf.outputs.diff == 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9
      # terraform init
      - name: terraform init
#        if: steps.diff_tf.outputs.diff == 'true'
        run: terraform -chdir="${TERRAFORM_DIR}" init
      # terraform plan
      - name: terraform plan
        if: steps.diff_tf.outputs.diff == 'true'
        id: plan
        run: terraform -chdir="${TERRAFORM_DIR}" plan -out workspace.plan
      # PR に terraform plan の内容を投稿
      - name: post PR terraform plan
#        if: always() && steps.diff_tf.outputs.diff == 'true' && github.event_name == 'pull_request'
        if: always() && github.event_name == 'pull_request'
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
      # terraform apply
      - name: terraform apply
#        if: steps.diff_tf.outputs.diff == 'true' && github.event_name == 'push'
        if: github.event_name == 'push'
        run: terraform -chdir="${TERRAFORM_DIR}" apply workspace.plan
